# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

from os import environ

config.bind(',p', ':spawn --userscript qute-pass --username-target secret --username-pattern "UserName: (.+)"')
config.bind(',P', ':spawn --userscript qute-pass --username-target secret --username-pattern "UserName: (.+)" --password-only')

# Uncomment this to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Additional arguments to pass to Qt, without leading `--`. With
# QtWebEngine, some Chromium arguments (see
# https://peter.sh/experiments/chromium-command-line-switches/ for a
# list) will work.
# Type: List of String
c.qt.args = ['ppapi-widevine-path=/usr/lib/qt/plugins/ppapi/libwidevinecdmadapter.so', 'enable-gpu-rasterization', 'ignore-gpu-blacklist']

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Directory to save downloads to. If unset, a sensible OS-specific
# default is used.
# Type: Directory
c.downloads.location.directory = '$HOME/downloads'

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = 'https://www.google.co.uk'

# Open base URL of the searchengine if a searchengine shortcut is
# invoked without parameters.
# Type: Bool
c.url.open_base_url = False

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://www.google.com/search?q={}'}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'https://www.google.co.uk'

# URL parameters to strip with `:yank url`.
# Type: List of String
c.url.yank_ignored_parameters = ['ref', 'utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content']

# Input settings
c.input.mouse.back_forward_buttons = False
c.tabs.mousewheel_switching = False

#
# Colors
#
c.colors.webpage.darkmode.enabled = False

c.colors.completion.category.bg = '#'+environ['THEME_BACKGROUND']
c.colors.completion.category.fg = '#'+environ['THEME_FOREGROUND']
c.colors.completion.even.bg = '#'+environ['THEME_BACKGROUND']
c.colors.completion.odd.bg = '#'+environ['THEME_BACKGROUND']
c.colors.completion.fg = '#'+environ['THEME_FOREGROUND']
c.colors.completion.item.selected.bg = '#'+environ['THEME_HIGHLIGHT']
c.colors.completion.item.selected.fg = '#'+environ['THEME_FOREGROUND']
c.colors.completion.item.selected.border.bottom = '#'+environ['THEME_HIGHLIGHT']
c.colors.completion.item.selected.border.top = '#'+environ['THEME_HIGHLIGHT']
c.colors.completion.match.fg = '#'+environ['THEME_COLOUR12']
c.colors.completion.item.selected.match.fg = '#'+environ['THEME_COLOUR12']

c.colors.statusbar.normal.fg = '#'+environ['THEME_FOREGROUND']
c.colors.statusbar.normal.bg = '#'+environ['THEME_BACKGROUND']
c.colors.statusbar.insert.fg = '#'+environ['THEME_BACKGROUND']
c.colors.statusbar.insert.bg = '#'+environ['THEME_BORDER_ACTIVE']
c.colors.statusbar.passthrough.fg = '#'+environ['THEME_BACKGROUND']
c.colors.statusbar.passthrough.bg = '#'+environ['THEME_COLOUR14']
c.colors.statusbar.private.fg = '#'+environ['THEME_FOREGROUND']
c.colors.statusbar.private.bg = '#'+environ['THEME_BACKGROUND']
c.colors.statusbar.command.fg = '#'+environ['THEME_FOREGROUND']
c.colors.statusbar.command.bg = '#'+environ['THEME_BACKGROUND']
c.colors.statusbar.command.private.fg = '#'+environ['THEME_FOREGROUND']
c.colors.statusbar.command.private.bg = '#'+environ['THEME_BACKGROUND']
c.colors.statusbar.progress.bg = '#'+environ['THEME_COLOUR6']
c.colors.statusbar.url.fg = '#'+environ['THEME_BORDER_ACTIVE']
c.colors.statusbar.url.error.fg = '#'+environ['THEME_COLOUR9']
c.colors.statusbar.url.hover.fg = '#'+environ['THEME_COLOUR14']
c.colors.statusbar.url.success.http.fg = '#'+environ['THEME_COLOUR1']
c.colors.statusbar.url.success.https.fg = '#'+environ['THEME_COLOUR10']
c.colors.statusbar.url.warn.fg = '#'+environ['THEME_COLOUR1']

# Color gradient interpolation system for the tab indicator.
# Type: ColorSystem
# Valid values:
#   - rgb: Interpolate in the RGB color system.
#   - hsv: Interpolate in the HSV color system.
#   - hsl: Interpolate in the HSL color system.
#   - none: Don't show a gradient.
c.colors.tabs.indicator.system = 'rgb'

c.colors.tabs.bar.bg = '#'+environ['THEME_BACKGROUND']
c.colors.tabs.odd.fg = '#'+environ['THEME_BORDER_ACTIVE']
c.colors.tabs.odd.bg = '#'+environ['THEME_BACKGROUND']
c.colors.tabs.even.fg = '#'+environ['THEME_BORDER_ACTIVE']
c.colors.tabs.even.bg = '#'+environ['THEME_BACKGROUND']
c.colors.tabs.selected.odd.fg = '#'+environ['THEME_BACKGROUND']
c.colors.tabs.selected.odd.bg = '#'+environ['THEME_BORDER_ACTIVE']
c.colors.tabs.selected.even.fg = '#'+environ['THEME_BACKGROUND']
c.colors.tabs.selected.even.bg = '#'+environ['THEME_BORDER_ACTIVE']

# Default monospace fonts. Whenever "monospace" is used in a font
# setting, it's replaced with the fonts listed here.
# Type: Font
c.fonts.default_family = [environ['THEME_FONT_FAMILY'], "xos4 Terminus", "Terminus", "Monospace", "DejaVu Sans Mono", "Monaco", "Bitstream Vera Sans Mono", "Andale Mono", "Courier New", "Courier", "Liberation Mono", "monospace", "Fixed", "Consolas", "Terminal"]
c.fonts.completion.entry = environ['THEME_FONT_SIZE'] + 'pt default_family'
c.fonts.completion.category = 'bold ' + environ['THEME_FONT_SIZE'] + 'pt default_family'
c.fonts.debug_console = environ['THEME_FONT_SIZE'] + 'pt default_family'
c.fonts.downloads = environ['THEME_FONT_SIZE'] + 'pt default_family'
c.fonts.hints = 'bold ' + environ['THEME_FONT_SIZE'] + 'pt default_family'
c.fonts.keyhint = environ['THEME_FONT_SIZE'] + 'pt default_family'
c.fonts.messages.error = environ['THEME_FONT_SIZE'] + 'pt default_family'
c.fonts.messages.info = environ['THEME_FONT_SIZE'] + 'pt default_family'
c.fonts.messages.warning = environ['THEME_FONT_SIZE'] + 'pt default_family'
c.fonts.prompts = environ['THEME_FONT_SIZE'] + 'pt default_family'
c.fonts.tabs.selected = environ['THEME_FONT_SIZE'] + 'pt default_family'
c.fonts.tabs.unselected = environ['THEME_FONT_SIZE'] + 'pt default_family'

# Hard minimum font size (in pixels).
# Type: Int
c.fonts.web.size.minimum = 0

# Minimum logical font size (in pixels) that is applied when zooming
# out.
# Type: Int
c.fonts.web.size.minimum_logical = 6
